@page "/AddStudent"
@page "/AddStudent/{id:int}"
@* @inherits AddStudentBase *@
@using StudentManagement;
@inject NavigationManager NavigationManager
 <PageTitle>AddStudent</PageTitle>
<div id="addstd" class="container pt-5">
<h2> Add Student</h2>
<EditForm Model="@student" OnValidSubmit="HandleSubmit" >
    <DataAnnotationsValidator/>
  
    <div id="frt">
         <label for="firstName">FirstName<span id="re"> *</span></label>
            <InputText id="firstName" @bind-Value="student.FirstName" placeholder="Please enter First Name" onkeydown="return /[a-zA-Z ]/i.test(event.key)"  ></InputText>
            <div><ValidationMessage For="@(()=>student.FirstName)" id="first-error" /> </div>
           
    </div>
    <div id="lst">
            <label for="lastName">LastName<span id="re"> *</span></label>
            <InputText id="lastName" @bind-Value="student.LastName" placeholder="Please enter Last Name" onkeydown="return /[a-zA-Z ]/i.test(event.key)" oninvalid="ValidatiionLastName"></InputText>
    
            <div><ValidationMessage For="@(()=>student.LastName)" id="last-error" /></div>

        </div>
    <div id="gnd">
            <label for="gender">Gender<span id="re"> *</span></label>
        <InputSelect id="gender" @bind-Value="student.Gender">
            <option value=-1 >Please Select Gender</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
        </InputSelect>
        <ValidationMessage For="@(()=>student.Gender)" id="gender-error" />
        </div>
        <div id="combo">
                <label for="dob">DateOfBirth<span id="re"> *</span></label>
            <InputDate id="dob" @bind-Value="@student.DateOfBirth" @bind-Value:format="dd/MM/yyyy" @oninput="UpdateAge" />
            <ValidationMessage For="@(()=>student.DateOfBirth)" id="dateofbirth-error" />
                <div id="ag1">
                    <label for="age">Age<span id="re"> *</span></label>
                <InputNumber id="age" @bind-Value="student.Age" @oninput="UpdateDateOfBirth"></InputNumber>
                <small>years</small>
                    <ValidationMessage   For="@(()=>student.Age)" id="error-age" />
                </div>
        </div>
    
 
    <div id="cts">
        <label for="class">Class</label>
            <InputText id="class" @bind-Value="student.Class" placeholder="Please enter class"></InputText>
    </div>
    <div id="ads">
        <label for="address">Address</label>
            <InputTextArea id="address" @bind-Value="student.Address" placeholder="Please enter address"></InputTextArea>
    </div>
        <div id="btn">
            <button id="save" type="submit" class="btn btn-primary">Save</button>
            <button id="cancel"type="button" @onclick="CancelStudent" class="btn btn-secondary">Cancel</button>
         
        </div>
    

</EditForm>
</div>
@code{
    [Parameter]
    public int? Id { get; set; }

    private Student? student;
    protected override void OnParametersSet()
    {
        if(Id is not null)
        {
            Student foundStudent = StudentService.GetStudent(Id.Value);
            student = new()
                {
                    Id = foundStudent.Id,
                    FirstName = foundStudent.FirstName,
                    LastName = foundStudent.LastName,
                    Gender = foundStudent.Gender,
                    DateOfBirth = foundStudent.DateOfBirth,
                    Age = foundStudent.Age,
                    Class = foundStudent.Class,
                    Address = foundStudent.Address
                };

        }
        else
        {
            student = new()
                {
                    DateOfBirth = DateTime.Today,
            FirstName = "",
                    LastName = "",
                    Class = "",
                    Address = "",
                    Age=null
            };
        }
    }


    public void HandleSubmit()
    {


        // ValidatiionLastName();
        if (student!.Id == 0)
        {
            StudentService.AddStudent(student);
        }
        else
        {
            StudentService.UpdateStudent(student);
        }

        NavigationManager.NavigateTo("/");
    }

    


    public void CancelStudent()
    {
        NavigationManager.NavigateTo("/");
    }
    private void UpdateAge(ChangeEventArgs args)
    {
        if (DateTime.TryParse(args.Value?.ToString(), out DateTime selectedDate))
        {
            student.Age = CalculateAge(selectedDate);
        }
    }

    private void UpdateDateOfBirth(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int enteredAge))
        {
            student.DateOfBirth = CalculateDateOfBirth(enteredAge);
        }
    }

    // Assuming you are using a UI framework, update the binding to use a nullable int
    private int? CalculateAge(DateTime birthDate)
    {
        DateTime currentDate = DateTime.Now;
        int age = currentDate.Year - birthDate.Year;

        if (currentDate.Month < birthDate.Month || (currentDate.Month == birthDate.Month && currentDate.Day < birthDate.Day))
        {
            age--;
        }

        return age;
    }

    private DateTime CalculateDateOfBirth(int? age)
    {
        if (!age.HasValue || age <= 0)
        {
            // Handle the case where age is not entered or is not valid
            // You may choose to return DateTime.MinValue or some default value
            return DateTime.MinValue;
        }

        DateTime currentDate = DateTime.Now;
        int birthYear = currentDate.Year - age.Value;

        DateTime dateOfBirth = new DateTime(birthYear, 1, 1);

        return dateOfBirth;
    }


   
}

    


    