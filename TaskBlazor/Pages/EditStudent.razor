
@page "/EditStudent/{id:int}"
@inject IJSRuntime JsRuntime
@using StudentManagement;
@inject NavigationManager NavigationManager
<PageTitle>EditStudent</PageTitle>
<div id="addstd1" class="container pt-5">
<h2>Edit Student</h2>
<EditForm Model="@student" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
   
        <div id="frt1">
            <label for="firstName">FirstName<span id="re"> *</span></label>
            <InputText id="firstName1" @bind-Value="student.FirstName" placeholder="Please enter First Name" onkeydown="return /[a-zA-Z ]/i.test(event.key)" maxlength="15" minlength="3"></InputText>
            <div> <ValidationMessage For="@(()=>student.FirstName)" id="first1-error" /></div>
    </div>
        <div id="lst1">
            <label for="lastName">LastName<span id="re"> *</span></label>
            <InputText id="lastName1" @bind-Value="student.LastName" placeholder="Please enter Last Name" onkeydown="return /[a-zA-Z ]/i.test(event.key)" maxlength="18" minlength="2"></InputText>
            <div>
                <ValidationMessage For="@(()=>student.LastName)" id="last1-error"/>
            </div>
        </div>

        <div id="gnd1">
            <label for="gender">Gender<span id="re"> *</span></label>
        <InputSelect id="gender1" @bind-Value="student.Gender">
            <option value="">Please Select Gender</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
        </InputSelect>
            <ValidationMessage For="@(()=>student.Gender)" id="dob1-error" />
        </div>
        
        <div id="combo1">
                <label for="dob">DateOfBirth<span id="re"> *</span></label>
            <InputDate id="dob1" @bind-Value="@student.DateOfBirth" min="@DateTime.Now.ToString("1924-1-1")" max="@DateTime.Now.ToString("2024-12-31")" @oninput="UpdateDateOfBirth" />
            <ValidationMessage For="@(()=>student.DateOfBirth)"  id="date-error1"/>
                <div>
                    <label for="age" id="a1">Age<span id="re"> *</span></label>
                <InputNumber id="age1" @bind-Value="student.Age" @oninput="UpdateDateOfBirth"></InputNumber>
                <small>years</small>
                    <ValidationMessage For="@(()=>student.Age)" id="age-error1" />
                </div>
        </div>


        <div id="cts1">
        <label for="class">Class</label>
            <InputText id="class1" @bind-Value="student.Class" placeholder="Please enter class"></InputText>
    </div>
        <div id="ads1">
        <label for="address" id="addlabel1">Address</label>
            <InputTextArea id="address1" @bind-Value="student.Address" placeholder="Please enter address"></InputTextArea>
            
    </div>
        <div id="btn1">
            <button type="button" id="d1" @onclick="DeleteStd" class="btn btn-danger">Delete</button>
            <button type="submit" id="s1" class="btn btn-primary">Save</button>
            <button type="button"  id="c1" @onclick="CancelStudent" class="btn btn-secondary">Cancel</button>
        </div>
  
    
   

</EditForm>
</div>
@code {
    [Parameter]
    public int? Id { get; set; }
    private Student? student;
    private List<Student> students;
    private Student? currentStudent;
    protected override void OnParametersSet()
    {
        if (Id is not null)
        {
            Student foundStudent = StudentService.GetStudent(Id.Value);
            student = new()
                {
                    Id = foundStudent.Id,
                    FirstName = foundStudent.FirstName,
                    LastName = foundStudent.LastName,
                    Gender = foundStudent.Gender,
                    DateOfBirth = foundStudent.DateOfBirth,
                    Age = foundStudent.Age,
                    Class = foundStudent.Class,
                    Address = foundStudent.Address
                };

        }
        else
        {
            student = new()
                {
                    FirstName = "",
                    LastName = "",
                    Class = "",
                    Address = ""
                };
        }
    }


    public void HandleSubmit()
    {
        if (student!.Id == 0)
        {
            StudentService.AddStudent(student);
        }
        else
        {
            StudentService.UpdateStudent(student);
        }

        NavigationManager.NavigateTo("/");
    }
    public void CancelStudent()
    {
        NavigationManager.NavigateTo("/");
    }

    public async Task DeleteStd()
    {
        

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to Delete this student records");
        
        if(confirmed){
            StudentService.DeleteStudent(student.Id);
            
            NavigationManager.NavigateTo("/");
        }
        else{

        }
    }
    private void UpdateAge(ChangeEventArgs e)
    {
        try
        {
            if (DateTime.TryParse(e.Value.ToString(), out var dateOfBirth))
            {
                student.DateOfBirth = dateOfBirth;
                student.Age = DateTime.Now.Year - dateOfBirth.Year;
            }
        }
        catch (Exception ex) { }

    }

    private void UpdateDateOfBirth(ChangeEventArgs e)
    {
        try
        {
            if (int.TryParse(e.Value.ToString(), out var age))
            {
                student.Age = age;
                student.DateOfBirth = DateTime.Now.AddYears(-age);
            }
        }
        catch (Exception ex) { }
    }
   

   
    

}